{"version":3,"file":"appplication-context.js","sourceRoot":"","sources":["../../../../lib/injection/src/appplication-context.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata'\nimport { EventEmitter } from 'events';\n\nimport {\n    ApplicationContext,\n    ContextContainer,\n    DependencyRegistry,\n    ModifiableApplicationContext\n} from './types';\nimport { Instantiable, Maybe, Qualifier } from '../../global-types';\n\nclass ApplicationContextImpl implements ModifiableApplicationContext {\n    private dependencyToInjectionsMap: Map<string, Array<ContextContainer>> = new Map();\n    private dependencyRegistry: DependencyRegistry = {};\n    private afterLoadRegistry: Array<{ dependency: Instantiable<any>; methodName: Qualifier }> = [];\n    private loadedEvent: EventEmitter = new EventEmitter();\n\n\n    public add( dependency: string, on: ContextContainer ): void {\n        const list: Array<ContextContainer> = this.dependencyToInjectionsMap.get(dependency) || [];\n        list.push(on);\n        this.dependencyToInjectionsMap.set(dependency, list);\n    }\n\n    public addAfterLoad<T>( dependency: Instantiable<T>, methodName: Qualifier ): void {\n        this.afterLoadRegistry.push({ dependency, methodName });\n    }\n\n    public registerDependency<T>( clazz: Instantiable<T>, qualifier?: string ): void {\n        const dependencyName = !!qualifier? qualifier : clazz.name;\n        this.dependencyRegistry[dependencyName] = new clazz() as any;\n    }\n\n    public loadDependency <T> ( Dependency: Instantiable<T> ): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            if ( !Object.getOwnPropertyDescriptor(ApplicationContextImpl, 'INITIALIZED') ) {\n                reject(<unknown>new Error('Application Context is not loaded yet.'));\n            }\n            if ( !this.dependencyRegistry[Dependency.name] ) {\n                reject(<unknown>new Error(`No dependency <<${ Dependency.name }>> found.`));\n            }\n            if ( !(this.dependencyRegistry[Dependency.name] instanceof Dependency) ) {\n                reject(new Error(`Dependency <<${ Dependency.name }>> is no valid instance of the desired type.`));\n            }\n            resolve(<unknown>this.dependencyRegistry[Dependency.name] as T);\n        });\n    }\n\n    public load <T> ( EntryClass?: Maybe<Instantiable<T>> ): Promise<T> {\n        return new Promise(resolve => {\n            const resolveAndEmit = (component?: T) => {\n                this.loadedEvent.emit('loaded');\n                this.loadedEvent.removeAllListeners();\n                this.executeAfterLoads();\n                resolve(component);\n            };\n            Object.defineProperty(ApplicationContextImpl, 'INITIALIZED', {\n                value: true, writable: false, configurable: false\n            });\n            this.dependencyToInjectionsMap.forEach((value, dependency) => {\n                if ( !this.dependencyRegistry[dependency] ) {\n                    throw new Error(`Unsatisfied dependency ${ dependency }`);\n                }\n                value.forEach((v: ContextContainer) => {\n                    Object.defineProperty(v.target, v.key, {\n                        value: this.dependencyRegistry[dependency],\n                        writable: false,\n                        configurable: false\n                    });\n                });\n            });\n            if ( EntryClass !== undefined ) {\n                this.loadDependency<T>(EntryClass).then(resolveAndEmit);\n            } else {\n                resolveAndEmit();\n            }\n        });\n    }\n\n    public whenLoaded( callback: Function ): void {\n        if ( Object.getOwnPropertyDescriptor(ApplicationContextImpl, 'INITIALIZED') ) {\n            callback();\n            return;\n        }\n        this.loadedEvent.addListener('loaded', callback);\n    }\n\n    private executeAfterLoads() {\n        this.afterLoadRegistry.forEach(registeredAfterLoad => {\n            const createdDependency: Maybe<any> = this.dependencyRegistry[registeredAfterLoad.dependency.name];\n            if ( createdDependency === undefined ) {\n                throw new TypeError('Dependency instance is undefined');\n            }\n            createdDependency[registeredAfterLoad.methodName]?.apply(createdDependency);\n        });\n    }\n}\n\nconst modifiableApplicationContext: ModifiableApplicationContext = new ApplicationContextImpl();\n\nconst applicationContext: ApplicationContext = {\n    load: function <T> ( EntryClass?: Maybe<Instantiable<T>> ): Promise<T> {\n        return modifiableApplicationContext.load(EntryClass)\n    },\n    loadDependency: function<T>( Dependency: Instantiable<T> ): Promise<T> {\n        return modifiableApplicationContext.loadDependency(Dependency)\n    },\n    whenLoaded: function ( callback: Function ) {\n        modifiableApplicationContext.whenLoaded(callback);\n    }\n};\n\nexport { applicationContext, modifiableApplicationContext };\n"]}