{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../lib/injection/src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Instantiable, Loader, Maybe, Qualifier } from '../../global-types';\n\nexport interface DependencyRegistry {\n    [name: string]: Instantiable<any>;\n}\n\nexport interface ApplicationContext extends Loader {\n    loadDependency: <T> ( Dependency: Instantiable<T> ) => Promise<T>;\n    load: <T> ( EntryClass?: Maybe<Instantiable<T>> ) => Promise<T>;\n}\n\nexport interface ModifiableApplicationContext extends ApplicationContext {\n    add( dependency: string, on: ContextContainer ): void;\n    addAfterLoad<T>( dependency: Instantiable<T>, methodName: Qualifier ): void;\n    registerDependency<T>( clazz: Instantiable<T>, qualifier?: string ): void;\n}\n\nexport interface ContextContainer  {\n    target: any;\n    key: any;\n}\n"]}