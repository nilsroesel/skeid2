{"version":3,"file":"InjectorIT.js","sourceRoot":"","sources":["../../../../lib/injection/test/InjectorIT.ts"],"names":[],"mappings":";;AAAA,mBAAiB;AACjB,8CAAqD;AACrD,iDAAmD;AAEnD,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IAEvC,SAAS,CAAC,GAAG,EAAE,CAAC,6BAAkB,CAAC,IAAI,EAAE,CAAC,CAAC;IAE3C,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAC9C,6BAAkB,CAAC,cAAc,CAAC,kBAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAChD,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,0BAA0B,CAAC,CAAC;YACxD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,0CAA0C,CAAC,CAAC;YACzE,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,2CAA2C,CAAC,CAAC;YAC/E,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACzC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAC9B,MAAM,CAAC,2BAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAC/B,MAAM,SAAS,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;QAChD,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAE7B,6BAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAElD,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACjD,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["import 'jasmine';\nimport { applicationContext } from '../src/external';\nimport { afterLoadSet, Bar } from './InjectorMock';\n\ndescribe('Test Dependency Injection', () => {\n\n    beforeAll(() => applicationContext.load());\n\n    it('Autowired fields should be an instance', () => {\n        applicationContext.loadDependency(Bar).then((bar) => {\n            expect(bar.foo).toBeDefined('Autowired Field is unset');\n            expect(bar.foo2).toBeDefined('Class Qualified Autowired Field is unset');\n            expect(bar.qualified).toBeDefined('String Qualified Autowired field is unset');\n            expect(bar.foo.getMock()).toBe('works');\n            expect(bar.foo2.getMock()).toBe('works');\n            expect(bar.qualified.getMock()).toBe('works');\n        });\n    });\n\n    it('Should test after load', () => {\n        expect(afterLoadSet).toBe(true);\n    });\n\n    it('Should test whenLoaded', () => {\n       const spyObject = { callback: () => undefined };\n       spyOn(spyObject, 'callback');\n\n       applicationContext.whenLoaded(spyObject.callback);\n\n       expect(spyObject.callback).toHaveBeenCalled();\n    });\n    \n});\n"]}