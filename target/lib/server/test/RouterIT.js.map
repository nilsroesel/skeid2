{"version":3,"file":"RouterIT.js","sourceRoot":"","sources":["../../../../lib/server/test/RouterIT.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jasmine';\nimport { parse } from 'url';\n\nimport { Router } from '../src/routing/router';\nimport { ClashingRoutesError, DuplicatedEndpointError } from '../../configuration/error';\nimport { MethodNotAllowedError, NoSuchRouteError } from '../src/error';\nimport { Consumes } from '../src/decorators/consumes';\n\ndescribe('Test Router and routing', () => {\n    let router: Router;\n\n    beforeEach(() => {\n        router = new Router();\n    });\n\n    it('Should find mapped routes', () => {\n        router.registerRoute('GET','/users/count', () => 0);\n        router.registerRoute('GET','/users', () => []);\n        router.registerRoute('GET','/api-version', () => 'v0-test');\n\n        expect(router.routeRequest('GET', parse('/users/count')).restMethod())\n            .toEqual(0);\n        expect(router.routeRequest('GET', parse('/users')).restMethod())\n            .toEqual([]);\n        expect(router.routeRequest('GET', parse('/api-version')).restMethod())\n            .toEqual('v0-test');\n    });\n\n    it('Should not register single route parts', () => {\n        router.registerRoute('GET','/users/count', () => undefined);\n        expect(() => router.routeRequest('GET', parse('/users')))\n            .toThrowMatching(thrown => (thrown instanceof NoSuchRouteError));\n        expect(() => router.routeRequest('GET', parse('/users/')))\n            .toThrowMatching(thrown => (thrown instanceof NoSuchRouteError));\n    });\n\n    it('Should work with path parameters', () => {\n        const user1 = { id: 1, name: 'user1' };\n        router.registerRoute('GET','/users', () => [user1]);\n        router.registerRoute('GET','/users/count', () => 1);\n        router.registerRoute('GET','/users/count/contacts', () => 1);\n        router.registerRoute('GET','/users/{id}', () => user1);\n        router.registerRoute('GET','/users/{id}/contacts', () => []);\n\n        expect(router.routeRequest('GET', parse('/users/count')).restMethod())\n            .toEqual(1);\n        expect(router.routeRequest('GET', parse('/users/count/contacts')).restMethod())\n            .toEqual(1);\n        expect(router.routeRequest('GET', parse('/users')).restMethod())\n            .toEqual([user1]);\n        expect(router.routeRequest('GET', parse('/users/1')).restMethod())\n            .toEqual(user1);\n        expect(router.routeRequest('GET', parse('/users/1/contacts')).restMethod())\n            .toEqual([]);\n    });\n\n    it('Should assign the correct path variables', () => {\n        router.registerRoute('GET','/users/{id}', () => undefined);\n        expect(router.routeRequest('GET', parse('/users/1')).pathVariables)\n            .toEqual({ id: '1' });\n    });\n\n    it('Should map same routes with different methods', () => {\n        router.registerRoute('GET','/users', () => 200);\n        router.registerRoute('POST','/users', () => 201);\n        router.registerRoute('DELETE','/users', () => 204);\n\n        expect(router.routeRequest('GET', parse('/users')).restMethod())\n            .toEqual(200);\n        expect(router.routeRequest('POST', parse('/users')).restMethod())\n            .toEqual(201);\n        expect(router.routeRequest('DELETE', parse('/users')).restMethod())\n            .toEqual(204);\n    });\n\n    it('Should throw an NoSuchRouteError if route does not exist', () => {\n        expect(() => router.routeRequest('GET', parse('/users')))\n            .toThrowMatching(thrown => (thrown instanceof NoSuchRouteError));\n    });\n\n    it('Should throw an MethodNotAllowedError if route does exist and the method is not defined', () => {\n        router.registerRoute('GET','/users', () => 200);\n        expect(() => router.routeRequest('POST', parse('/users')))\n            .toThrowMatching(thrown => (thrown instanceof MethodNotAllowedError));\n    });\n\n    it('Should not be possible to register the same route twice', () => {\n        expect(() => {\n            router.registerRoute('GET','/users/', () => undefined);\n            router.registerRoute('GET','/users/', () => undefined);\n        }).toThrowMatching(thrown => (thrown instanceof DuplicatedEndpointError));\n    });\n\n    it('Should be possible to register the same route with same http, but different accept-mime', () => {\n        class Test {\n            withMetadata(){ return 1 }\n        }\n        Consumes('application/json')(Test.prototype, 'withMetadata');\n        router.registerRoute('GET','/users/', () => undefined);\n        router.registerRoute('GET','/users/', Test.prototype.withMetadata);\n\n        expect(router.routeRequest('GET', parse('/users/'), 'application/json').restMethod())\n            .toEqual(1);\n        expect(router.routeRequest('GET', parse('/users/')).restMethod())\n            .toBeUndefined();\n    });\n\n    it('Should not be possible to register two path variables at the same level', () => {\n        expect(() => {\n            router.registerRoute('GET','/users/{id}', () => undefined);\n            router.registerRoute('GET','/users/{foo}', () => undefined);\n        }).toThrowMatching(thrown => (thrown instanceof ClashingRoutesError));\n    });\n\n});\n"]}