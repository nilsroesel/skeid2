{"version":3,"file":"SchemaIT.js","sourceRoot":"","sources":["../../../../lib/server/test/SchemaIT.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jasmine';\n\nimport { ArraySerializer, DateSerializer, InvalidSchemaError, RestSchema } from '../src/schema/';\nimport { Address, User, UserList, UserWithAddress } from './helpers';\n\ndescribe('RestSchema', () => {\n    it('Should serialize a valid object from a schema', () => {\n        const UserSchema = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: DateSerializer\n        });\n\n        const created = UserSchema.serialize({\n           id: 1,\n           name: 'Waldo',\n           createdDate: '01-01-1999'\n        });\n\n        expect(created.id).toEqual(1);\n        expect(created.name).toEqual('Waldo');\n        expect(created.createdDate).toEqual(new Date('01-01-1999'));\n    });\n\n    it('Should serialize an array', () => {\n        const UserSchema = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: DateSerializer\n        });\n        const UserListSchema = new RestSchema<UserList>( {\n            users: ArraySerializer(UserSchema)\n        });\n\n        const users: Array<any> = [\n            {\n                id: 1,\n                name: 'Waldo',\n                createdDate: '01-01-1999'\n            },\n            {\n                id: 2,\n                name: 'Walter',\n                createdDate: '01-01-2000'\n            }\n        ];\n\n        const created = UserListSchema.serialize({ users });\n        expect(created.users[0].id).toEqual(1);\n        expect(created.users[1].id).toEqual(2);\n        expect(created.users[0].name).toEqual('Waldo');\n        expect(created.users[1].name).toEqual('Walter');\n        expect(created.users[0].createdDate).toEqual(new Date('01-01-1999'));\n        expect(created.users[1].createdDate).toEqual(new Date('01-01-2000'));\n    });\n\n    it('Should serialize an empty array', () => {\n        const UserSchema = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: DateSerializer\n        });\n        const UserListSchema = new RestSchema<UserList>( {\n            users: ArraySerializer(UserSchema)\n        });\n\n        const users: Array<any> = [];\n\n        const created = UserListSchema.serialize({ users });\n        expect(created.users).toEqual([]);\n    });\n\n    it('Should fail to serialize an array with wrong items', () => {\n        const UserSchema = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: DateSerializer\n        });\n        const UserListSchema = new RestSchema<UserList>( {\n            users: ArraySerializer(UserSchema)\n        });\n\n        const users: Array<any> = [{ notAnUserProperty: '' }];\n        expect(() => {\n            UserListSchema.serialize({ users });\n        }).toThrowMatching(thrown => thrown instanceof InvalidSchemaError);\n    });\n\n    it('Should serialize with nested schema', () => {\n        const AddressSchema = new RestSchema<Address>({\n            street: String,\n            zipCode: String\n        });\n        const UserWithAddressSchema = new RestSchema<UserWithAddress>( {\n            id: Number,\n            name: String,\n            createdDate: DateSerializer,\n            address: AddressSchema\n        });\n        const created = UserWithAddressSchema.serialize({\n            id: 1,\n            name: 'Waldo',\n            createdDate: '01-01-1999',\n            address: {\n                street: 'Foo Street',\n                zipCode: '00000'\n            }\n        });\n\n        expect(created.id).toEqual(1);\n        expect(created.name).toEqual('Waldo');\n        expect(created.address.street).toEqual('Foo Street');\n        expect(created.address.zipCode).toEqual('00000');\n    });\n\n    it('Should serialize a valid object from a schema with optional parameters', () => {\n        const defaultDate: Date = new Date();\n        const UserSchema: RestSchema<User> = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: {\n                serializer: DateSerializer,\n                required: false,\n                defaultValue: defaultDate\n            }\n        });\n        const createdUser = UserSchema.serialize({\n            id: 1,\n            name: 'Waldo'\n        });\n\n        expect(createdUser.createdDate).toEqual(defaultDate);\n    });\n\n    it('Should prefer a present value over a default value', () => {\n        const defaultDate: Date = new Date();\n        const UserSchema: RestSchema<User> = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: {\n                serializer: DateSerializer,\n                required: false,\n                defaultValue: defaultDate\n            }\n        });\n        const createdUser = UserSchema.serialize({\n            id: 1,\n            name: 'Waldo',\n            createdDate: '01-01-1999'\n        });\n\n        expect(createdUser.createdDate).toEqual(new Date('01-01-1999'));\n    });\n\n    it('Should fail to serialize an invalid object from a schema', () => {\n        const UserSchema: RestSchema<User> = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: {\n                serializer: DateSerializer,\n                required: true\n            }\n        });\n\n        expect(() => {\n           UserSchema.serialize({\n               id: 1,\n               name: 'Waldo',\n           });\n        }).toThrowMatching(thrown => thrown instanceof InvalidSchemaError);\n    });\n\n    it('Should fail on a strict schema', () => {\n        const UserSchema: RestSchema<User> = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: DateSerializer\n        });\n\n        expect(() => {\n            UserSchema.serialize({\n                id: 1,\n                name: 'Waldo',\n                createdDate: '01-01-1999',\n                somethingElse: undefined\n            });\n        }).toThrowMatching(thrown => thrown instanceof InvalidSchemaError);\n    });\n\n    it('Should not fail on a lenient schema', () => {\n        const UserSchema: RestSchema<User> = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: DateSerializer\n        }, false);\n\n        const created = UserSchema.serialize({\n            id: 1,\n            name: 'Waldo',\n            createdDate: '01-01-1999',\n            somethingElse: undefined\n        });\n\n        expect(created.id).toEqual(1);\n        expect(created.name).toEqual('Waldo');\n        expect(created.createdDate).toEqual(new Date('01-01-1999'));\n    });\n\n    it('Should serialize anything for the any schema', () => {\n        const AnySchema: RestSchema<any>= RestSchema.any();\n        const data: any = {\n            something: null,\n            somethingElse: 'Hello World'\n        };\n        const created: any = AnySchema.serialize(data);\n        expect(created).toEqual(data);\n    });\n\n    it('Should serialize an intersection schema', () => {\n        const UserSchema: RestSchema<User> = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: DateSerializer\n        });\n        const UserListSchema = new RestSchema<UserList>( {\n            users: ArraySerializer(UserSchema)\n        });\n        const UserAndUserListSchema = UserListSchema.intersection(UserSchema);\n\n        const user = { id: 1, name: 'Waldo', createdDate: '01-01-1999' };\n        const createdUser = { id: 1, name: 'Waldo', createdDate: new Date('01-01-1999') };\n\n        const created = UserAndUserListSchema.serialize({\n            id: 1,\n            name: 'Waldo',\n            createdDate: '01-01-1999',\n            users: [user, user]\n        });\n        expect(created).toEqual({ ...createdUser, users: [createdUser, createdUser] });\n    });\n\n    it('Should fail to serialize an intersection schema', () => {\n        const UserSchema: RestSchema<User> = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: DateSerializer\n        });\n        const UserListSchema = new RestSchema<UserList>( {\n            users: ArraySerializer(UserSchema)\n        });\n\n        expect(() => {\n            const UserAndUserListSchema = UserListSchema.intersection(UserSchema);\n            UserAndUserListSchema.serialize({ id: 1, name: 'Waldo', createdDate: '01-01-1999' });\n        }).toThrowMatching(thrown => thrown instanceof InvalidSchemaError);\n    });\n\n    it('Should serialize an partial schema', () => {\n        const PartialUserSchema: RestSchema<Partial<User>> = new RestSchema<User>( {\n            id: Number,\n            name: String,\n            createdDate: DateSerializer\n        }).asPartialType();\n\n        const created1 = PartialUserSchema.serialize({ id: 1 });\n\n        expect(created1.id).toEqual(1);\n        expect(created1.name).not.toBeDefined();\n        expect(created1.createdDate).not.toBeDefined();\n\n    });\n});\n"]}