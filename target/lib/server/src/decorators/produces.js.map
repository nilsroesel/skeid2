{"version":3,"file":"produces.js","sourceRoot":"","sources":["../../../../../lib/server/src/decorators/produces.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAG1B,mCAA2E;AAC3E,wDAIsC;AAEtC,MAAM,kBAAkB,GAAG,MAAM,CAAC,6BAA6B,CAAC,CAAC;AACjE,MAAM,gBAAgB,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAItD,MAAM,aAAa,GAAyB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAChE,SAAgB,QAAQ,CAAK,UAA2C,EAAE,QAAwB;IAC9F,OAAO,CAAE,MAAW,EAAE,UAA6B,EAAS,EAAE;QAC1D,IAAK,UAAU,KAAK,SAAS,EAAG;YAC5B,OAAO,sBAAsB,CAAC,MAAM,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;SAC/D;QACD,MAAM,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;QACzC,IAAK,CAAC,6BAAqB,CAAC,aAAa,CAAC,EAAG;YACzC,MAAM,IAAI,iCAAyB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;SAChE;QACD,MAAM,MAAM,GAA6B,qBAAqB,CAAC,UAAU,CAAC,CAAC;QAC3E,iCAAyB,CAAC,aAAa,EAAE,kBAAkB,EAAE,MAAM,CAAC,CAAC;QACrE,iCAAyB,CAAC,aAAa,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IACzE,CAAC,CAAC;AACN,CAAC;AAbD,4BAaC;AAED,SAAS,sBAAsB,CAAE,WAAqB,EAClD,UAA6C,EAAE,QAAwB;IACnE,MAAM,MAAM,GAA6B,qBAAqB,CAAC,UAAU,CAAC,CAAC;IAE3E,IAAK,CAAC,WAAW,CAAC,SAAS,YAAY,KAAK,CAAC,IAAI,WAAW,KAAK,KAAK,EAAG;QACrE,iCAAyB,CAAC,WAAW,EAAE,kBAAkB,EAAE,MAAM,CAAC,CAAC;QACnE,iCAAyB,CAAC,WAAW,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QACnE,OAAO;KACV;IACD,MAAM,IAAI,yCAAiC,CAAC,QAAQ,EAChD,aAAa,EACb,GAAI,WAAW,CAAC,IAAK,oDAAoD,CAAC,CAAC;AACvF,CAAC;AAED,SAAS,qBAAqB,CAAE,IAAuC;IACnE,IAAK,OAAO,IAAI,KAAK,QAAQ;QAAG,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC;IAClD,OAAO,IAAI,CAAC;AAChB,CAAC;AAQD,SAAgB,6BAA6B,CAAE,IAAc;IACzD,MAAM,UAAU,GAAoC,OAAO,CAAC,WAAW,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;IAClG,MAAM,QAAQ,GAAkB,OAAO,CAAC,WAAW,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IAE5E,IAAK,UAAU,KAAK,SAAS,EAAG;QAC5B,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAA;KAClC;IACD,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC;AACpC,CAAC;AARD,sEAQC","sourcesContent":["import 'reflect-metadata';\n\nimport { Maybe, Qualifier } from '../../../global-types';\nimport { assignOnlyDefinedMetadata, decoratedItemIsMethod } from './utils';\nimport {\n    DecoratorType,\n    InvalidDecoratedItemError,\n    UnrecognizedUsageOfDecoratorError\n} from '../../../configuration/error';\n\nconst statusCodeMetadata = Symbol('produces:static-status-code');\nconst mimeTypeMetadata = Symbol('produces:mime-type');\n\nexport type StatusCodeGenerator<T> = ( obj: T ) => number;\n\nconst ALLOWED_TYPES: Array<DecoratorType> = ['CLASS', 'METHOD'];\nexport function Produces<T>( statusCode: number | StatusCodeGenerator<T>, mimeType?: Maybe<string> ) {\n    return ( target: any, methodName?: Maybe<Qualifier> ): void => {\n        if ( methodName === undefined ) {\n            return handleAsClassDecorator(target, statusCode, mimeType);\n        }\n        const decoratedItem = target[methodName];\n        if ( !decoratedItemIsMethod(decoratedItem) ) {\n            throw new InvalidDecoratedItemError(Produces, ALLOWED_TYPES);\n        }\n        const status: StatusCodeGenerator<any> = mergeStatusToFunction(statusCode);\n        assignOnlyDefinedMetadata(decoratedItem, statusCodeMetadata, status);\n        assignOnlyDefinedMetadata(decoratedItem, mimeTypeMetadata, mimeType);\n    };\n}\n\nfunction handleAsClassDecorator( constructor: Function,\n    statusCode: number | StatusCodeGenerator<any>, mimeType?: Maybe<string> ): void {\n        const status: StatusCodeGenerator<any> = mergeStatusToFunction(statusCode);\n\n        if ( (constructor.prototype instanceof Error) || constructor === Error ) {\n            assignOnlyDefinedMetadata(constructor, statusCodeMetadata, status);\n            assignOnlyDefinedMetadata(constructor, mimeTypeMetadata, mimeType);\n            return;\n        }\n        throw new UnrecognizedUsageOfDecoratorError(Produces,\n            ALLOWED_TYPES,\n            `${ constructor.name }: Ony classes extending <<Error>> can be decorated`);\n}\n\nfunction mergeStatusToFunction( from: number | StatusCodeGenerator<any> ): StatusCodeGenerator<any> {\n    if ( typeof from === 'number' ) return () => from;\n    return from;\n}\n\n\nexport interface ProducingMetadata {\n    statusCode: Maybe<StatusCodeGenerator<any>>;\n    mimeType: Maybe<string>;\n}\n\nexport function getProducingDecoratorMetadata( from: Function ): ProducingMetadata {\n    const statusCode: Maybe<StatusCodeGenerator<any>> = Reflect.getMetadata(statusCodeMetadata, from);\n    const mimeType: Maybe<string> = Reflect.getMetadata(mimeTypeMetadata, from);\n\n    if ( statusCode !== undefined ) {\n        return { statusCode, mimeType }\n    }\n    return { statusCode, mimeType };\n}\n"]}