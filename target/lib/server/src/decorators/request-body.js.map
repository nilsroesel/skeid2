{"version":3,"file":"request-body.js","sourceRoot":"","sources":["../../../../../lib/server/src/decorators/request-body.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAE1B,wDAAsE;AACtE,sCAAuC;AAE1B,QAAA,mBAAmB,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;AAC5C,QAAA,qBAAqB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAChE,SAAgB,WAAW,CAAK,MAA2B,EACvD,WAA8B,EAAE,cAA8B;IAC1D,IAAK,OAAO,cAAc,KAAK,QAAQ,IAAI,0BAAW,CAAC,WAAW,CAAC,EAAG;QAClE,oBAAoB,CAAC,MAAM,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;KAC7D;SAAM,IAAK,MAAM,YAAY,mBAAU,EAAG;QACvC,OAAO,eAAe,CAAM,MAAM,CAAC,CAAC;KACvC;AACT,CAAC;AAPD,kCAOC;AAED,SAAS,oBAAoB,CAAE,MAAW,EAAE,WAAsB,EAAE,cAAsB;IACtF,OAAO,CAAC,cAAc,CAAC,2BAAmB,EAAE,cAAc,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;IACjF,OAAO,CAAC,cAAc,CAAC,6BAAqB,EAAE,mBAAU,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;AACzF,CAAC;AAED,SAAS,eAAe,CAAK,MAAqB;IAC9C,OAAO,CAAE,MAAW,EAAE,WAAsB,EAAE,cAAsB,EAAG,EAAE;QACrE,OAAO,CAAC,cAAc,CAAC,2BAAmB,EAAE,cAAc,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;QACjF,OAAO,CAAC,cAAc,CAAC,6BAAqB,EAAE,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;IAC/E,CAAC,CAAA;AACL,CAAC;AAED,SAAgB,0CAA0C,CAAE,IAAc;IACtE,OAAO,OAAO,CAAC,WAAW,CAAC,2BAAmB,EAAE,IAAI,CAAC,CAAC;AAC1D,CAAC;AAFD,gGAEC;AAED,SAAgB,+BAA+B,CAAE,IAAc;IAC3D,OAAO,OAAO,CAAC,WAAW,CAAC,6BAAqB,EAAE,IAAI,CAAC,CAAC;AAC5D,CAAC;AAFD,0EAEC","sourcesContent":["import 'reflect-metadata';\n\nimport { isQualifier, Maybe, Qualifier } from '../../../global-types';\nimport { RestSchema } from '../schema';\n\nexport const requestBodyMetadata = Symbol('requestBody');\nexport const requestBodyJsonSchema = Symbol('body:schema:json');\nexport function RequestBody<T>( schema: any | RestSchema<T>,\n    propertyKey?: Maybe<Qualifier>, parameterIndex?: Maybe<number> ): any {\n        if ( typeof parameterIndex === 'number' && isQualifier(propertyKey) ) {\n            handlePlainDecorator(schema, propertyKey, parameterIndex);\n        } else if ( schema instanceof RestSchema ) {\n            return handleAsFactory<any>(schema);\n        }\n}\n\nfunction handlePlainDecorator( target: any, propertyKey: Qualifier, parameterIndex: number ) {\n    Reflect.defineMetadata(requestBodyMetadata, parameterIndex, target[propertyKey]);\n    Reflect.defineMetadata(requestBodyJsonSchema, RestSchema.any(), target[propertyKey]);\n}\n\nfunction handleAsFactory<T>( schema: RestSchema<T> ) {\n    return ( target: any, propertyKey: Qualifier, parameterIndex: number ) => {\n        Reflect.defineMetadata(requestBodyMetadata, parameterIndex, target[propertyKey]);\n        Reflect.defineMetadata(requestBodyJsonSchema, schema, target[propertyKey]);\n    }\n}\n\nexport function getRequestParameterIndexFromMethodMetaData( from: Function ): Maybe<number> {\n    return Reflect.getMetadata(requestBodyMetadata, from);\n}\n\nexport function getBodySchemaFromMethodMetadata( from: Function ): Maybe<RestSchema<unknown>> {\n    return Reflect.getMetadata(requestBodyJsonSchema, from);\n}\n"]}