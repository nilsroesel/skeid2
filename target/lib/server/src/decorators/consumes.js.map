{"version":3,"file":"consumes.js","sourceRoot":"","sources":["../../../../../lib/server/src/decorators/consumes.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAG1B,mCAAgD;AAChD,wDAAyE;AAEzE,MAAM,yBAAyB,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAClD,QAAA,aAAa,GAAW,KAAK,CAAC;AAE3C,SAAgB,QAAQ,CAAE,QAAgB;IACtC,OAAO,CAAE,SAAc,EAAE,UAAqB,EAAG,EAAE;QAC/C,MAAM,cAAc,GAAY,SAAS,CAAC,UAAU,CAAC,CAAC;QACtD,IAAK,CAAC,6BAAqB,CAAC,cAAc,CAAC,EAAG;YAC1C,MAAM,IAAI,iCAAyB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC7D;QACD,OAAO,CAAC,cAAc,CAAC,yBAAyB,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;IAChF,CAAC,CAAC;AACN,CAAC;AARD,4BAQC;AAED,SAAgB,oBAAoB,CAAE,IAAc;IAChD,OAAO,OAAO,CAAC,WAAW,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;AAChE,CAAC;AAFD,oDAEC","sourcesContent":["import 'reflect-metadata';\n\nimport { Maybe, Qualifier } from '../../../global-types';\nimport { decoratedItemIsMethod } from './utils';\nimport { InvalidDecoratedItemError } from '../../../configuration/error';\n\nconst consumingMimeTypeMetadata = Symbol('consumes:mime-type');\nexport const MIME_WILDCARD: string = '*/*';\n\nexport function Consumes( mimeType: string ) {\n    return ( component: any, methodName: Qualifier ) => {\n        const probablyMethod: unknown = component[methodName];\n        if ( !decoratedItemIsMethod(probablyMethod) ) {\n            throw new InvalidDecoratedItemError(Consumes, ['METHOD']);\n        }\n        Reflect.defineMetadata(consumingMimeTypeMetadata, mimeType, probablyMethod);\n    };\n}\n\nexport function getConsumingMimeType( from: Function ): Maybe<string> {\n    return Reflect.getMetadata(consumingMimeTypeMetadata, from);\n}\n"]}