{"version":3,"file":"response-entity.js","sourceRoot":"","sources":["../../../../../lib/server/src/decorators/response-entity.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAK1B,MAAM,wCAAwC,GAAG,MAAM,CAAC,2BAA2B,CAAC,CAAC;AASrF,SAAgB,cAAc,CAAsB,MAA2B;IAC3E,OAAO,CAAE,MAAW,EAAE,UAAqB,EAAE,KAAa,EAAG,EAAE;QAC3D,MAAM,+BAA+B,GAAoC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QAC3F,OAAO,CAAC,cAAc,CAAC,wCAAwC,EAAE,+BAA+B,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;IACzH,CAAC,CAAC;AACN,CAAC;AALD,wCAKC;AAED,SAAgB,kCAAkC,CAAE,IAAc;IAC9D,OAAQ,OAAO,CAAC,WAAW,CAAC,wCAAwC,EAAE,IAAI,CAAC,CAAC;AAChF,CAAC;AAFD,gFAEC","sourcesContent":["import 'reflect-metadata';\n\nimport { Response, ResponseFactory } from '../connectivity';\nimport { Instantiable, Maybe, Qualifier } from '../../../global-types';\n\nconst responseEntityParameterInjectionMetadata = Symbol('response-entity-injection');\n\ntype SelectorFunction<T> = (factory: ResponseFactory) => () => Instantiable<T>\n\nexport interface ResponseEntityInjectionMetadata {\n    index: number;\n    select: SelectorFunction<any>;\n}\n\nexport function ResponseEntity<T extends Response>( select: SelectorFunction<T> ) {\n    return ( target: any, methodName: Qualifier, index: number ) => {\n        const responseEntityInjectionMetadata: ResponseEntityInjectionMetadata = { index, select };\n        Reflect.defineMetadata(responseEntityParameterInjectionMetadata, responseEntityInjectionMetadata, target[methodName])\n    };\n}\n\nexport function getResponseEntityInjectionMetadata( from: Function ): Maybe<ResponseEntityInjectionMetadata> {\n    return  Reflect.getMetadata(responseEntityParameterInjectionMetadata, from);\n}\n\n\n\n"]}