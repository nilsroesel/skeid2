{"version":3,"file":"application.js","sourceRoot":"","sources":["../../../../../lib/server/src/decorators/application.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAE7B,wDAAqE;AACrE,8DAAqE;AACrE,oCAIkB;AAClB,kDAA0E;AAC1E,8CAA2C;AAO3C,SAAgB,WAAW,CAAE,aAAgD;IACzE,OAAO,gBAAgB,CAAC,aAAa,CAAC,CAAC;AAC3C,CAAC;AAFD,kCAEC;AAED,SAAS,gBAAgB,CAAE,aAAgD;IACvE,OAAO,CAAM,KAAsB,EAAkB,EAAE;QACnD,IAAK,CAAC,6BAAc,CAAC,KAAK,CAAC,EAAG;YAC1B,MAAM,IAAI,KAAK,CAAC,kCAAmC,KAAM,GAAG,CAAC,CAAC;SACjE;QACD,UAAU,CAAC,GAAG,EAAE,CAAC,6BAAkB,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1F,CAAC,CAAA;AACL,CAAC;AAED,SAAS,WAAW,CAAE,aAAgD;IAClE,MAAM,qBAAqB,GAAG,aAAa,CAAC,WAAW,IAAI,EAAE,CAAC;IAE9D,MAAM,qBAAqB,GAAG,yBAAiB,CAAC,OAAO,CACnD,wBAAgB,CAAC,uCAAuC,EAAE,EAC1D,2CAAmC,CAAC,yBAAyB,EAAE,EAC/D,GAAG,qBAAqB,CAC3B,CAAC;IAEF,MAAM,eAAe,GAAoB,IAAI,qCAAsB,CAAC,eAAM,CAAC,CAAC,MAAM,EAAE,CAAC;IAErF,qBAAqB,CAAC,SAAS,CAAC,GAAG,EAAE;QACjC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,IAAI,EAAE,EAAE,GAAG,EAAE;YACrE,OAAO,CAAC,IAAI,CAAC,MAAM,EAAC,mCAAoC,aAAa,CAAC,IAAI,IAAI,EAAG,EAAE,CAAC,CAAC;YACrF,OAAO,CAAC,IAAI,CAAC,MAAM,EAAC,mBAAmB,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAC;AAEP,CAAC","sourcesContent":["import * as http from 'http';\n\nimport { Instantiable, isInstantiable } from '../../../global-types';\nimport { applicationContext } from '../../../injection/src/external';\nimport {\n    routesReadyState,\n    ReadyStateEmitter,\n    classFieldReadyStateEmitterComposer\n} from '../state';\nimport { RequestListener, RequestListenerFactory } from '../connectivity';\nimport { router } from '../routing/router';\n\nexport interface ApplicationConfiguration {\n    port: number;\n    isReadyWhen: Array<ReadyStateEmitter>;\n}\n\nexport function Application( configuration: Partial<ApplicationConfiguration> ) {\n    return decoratorFactory(configuration);\n}\n\nfunction decoratorFactory( configuration: Partial<ApplicationConfiguration> ) {\n    return <T> ( clazz: Instantiable<T> ): void | never  => {\n        if ( !isInstantiable(clazz) ) {\n            throw new Error(`Can not apply @Application for ${ clazz }.`);\n        }\n        setTimeout(() => applicationContext.load().then(() => startServer(configuration)), 1);\n    }\n}\n\nfunction startServer( configuration: Partial<ApplicationConfiguration> ): void {\n    const configuredReadyStates = configuration.isReadyWhen || [];\n\n    const applicationReadyState = ReadyStateEmitter.compose(\n        routesReadyState.getSelfAndSetToReadyIfPristineAfterInit(),\n        classFieldReadyStateEmitterComposer.composeRegisteredEmitters(),\n        ...configuredReadyStates\n    );\n\n    const requestListener: RequestListener = new RequestListenerFactory(router).create();\n\n    applicationReadyState.whenReady(() => {\n        http.createServer(requestListener).listen(configuration.port || 80, () => {\n            console.info('INFO',`Api is up and listening on port ${ configuration.port || 80 }`);\n            console.info('INFO','Using schema http');\n        })\n    });\n\n}\n"]}