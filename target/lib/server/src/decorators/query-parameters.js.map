{"version":3,"file":"query-parameters.js","sourceRoot":"","sources":["../../../../../lib/server/src/decorators/query-parameters.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAK1B,MAAM,sBAAsB,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;AAErD,SAAgB,eAAe,CAAK,eAA8B;IAC9D,OAAO,CAAE,MAAW,EAAE,UAAkB,EAAG,EAAE;QACzC,OAAO,CAAC,cAAc,CAAC,sBAAsB,EAAE,eAAe,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;IACxF,CAAC,CAAA;AACL,CAAC;AAJD,0CAIC;AAED,SAAgB,mCAAmC,CAAE,IAAc;IAC/D,OAAO,OAAO,CAAC,cAAc,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;AAChE,CAAC;AAFD,kFAEC","sourcesContent":["import 'reflect-metadata';\n\nimport { RestSchema } from '../schema';\nimport { Maybe } from '../../../global-types';\n\nconst queryParameterMetadata = Symbol('queryParams');\n\nexport function QueryParameters<T>( parameterSchema: RestSchema<T> ) {\n    return ( target: any, methodName: string ) => {\n        Reflect.defineMetadata(queryParameterMetadata, parameterSchema, target[methodName]);\n    }\n}\n\nexport function getQueryParameterSchemaFromMetadata( from: Function ): Maybe<RestSchema<any>> {\n    return Reflect.getOwnMetadata(queryParameterMetadata, from);\n}\n"]}