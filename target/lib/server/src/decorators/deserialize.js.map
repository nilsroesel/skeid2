{"version":3,"file":"deserialize.js","sourceRoot":"","sources":["../../../../../lib/server/src/decorators/deserialize.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAG1B,mCAAoD;AAEpD,MAAM,oBAAoB,GAAG,MAAM,CAAC,2BAA2B,CAAC,CAAC;AACjE,MAAM,wBAAwB,GAAG,MAAM,CAAC,yBAAyB,CAAC,CAAC;AAInE,0GAA0G;AAC1G,SAAgB,WAAW,CAAK,YAAgC,EAAE,QAAwB;IACtF,OAAO,CAAK,MAAuB,EAAG,EAAE;QACpC,iCAAyB,CAAC,MAAM,EAAE,oBAAoB,EAAE,YAAY,CAAC,CAAC;QACtE,iCAAyB,CAAC,MAAM,EAAE,wBAAwB,EAAE,QAAQ,CAAC,CAAC;IAC1E,CAAC,CAAA;AACL,CAAC;AALD,kCAKC;AAOD,SAAgB,uBAAuB,CAAE,IAAc;IACnD,OAAO;QACH,YAAY,EAAE,OAAO,CAAC,WAAW,CAAC,oBAAoB,EAAE,IAAI,CAAC;QAC7D,QAAQ,EAAE,OAAO,CAAC,WAAW,CAAC,wBAAwB,EAAE,IAAI,CAAC;KAChE,CAAA;AACL,CAAC;AALD,0DAKC","sourcesContent":["import 'reflect-metadata';\n\nimport { Instantiable, Maybe } from '../../../global-types';\nimport { assignOnlyDefinedMetadata } from './utils';\n\nconst deserializerMetadata = Symbol('error-deserializer:string');\nconst deserializerMimeMetadata = Symbol('error-deserializer:mime');\n\nexport type DeserializerFunction<T> = ( obj: T ) => string | Buffer;\n\n// Default is resolved by content type: if application/json its JSON.stringify, else its Object.toString()\nexport function Deserialize<T>( deserializer: (obj: T) => string, mimeType?: Maybe<string> ) {\n    return <T>( target: Instantiable<T> ) => {\n        assignOnlyDefinedMetadata(target, deserializerMetadata, deserializer);\n        assignOnlyDefinedMetadata(target, deserializerMimeMetadata, mimeType);\n    }\n}\n\nexport interface DeserializerMetadata {\n    deserializer?: Maybe<DeserializerFunction<any>>;\n    mimeType?: Maybe<string>;\n}\n\nexport function getDeserializerMetadata( from: Function ): DeserializerMetadata {\n    return {\n        deserializer: Reflect.getMetadata(deserializerMetadata, from),\n        mimeType: Reflect.getMetadata(deserializerMimeMetadata, from)\n    }\n}\n"]}