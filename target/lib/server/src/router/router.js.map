{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../../lib/server/src/router/router.ts"],"names":[],"mappings":";;AACA,oCAAmE;AAEnE,MAAa,MAAM;IAIf;QAFiB,WAAM,GAAoB,eAAe,CAAC,aAAa,EAAE,CAAC;IAE5D,CAAC;IAET,aAAa,CAAE,UAAkB,EAAE,KAAa,EAAE,UAAqB;QAC1E,MAAM,UAAU,GAAkB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,QAAQ,GAAa,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;QAEtD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAClD,CAAC;IAED,YAAY,CAAE,UAAkB,EAAE,GAAQ;;QACtC,MAAM,WAAW,GAAkB,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE3D,MAAM,0BAA0B,GAAoB,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QAElG,IAAK,0BAA0B,CAAC,MAAM,KAAK,CAAC,EAAG;YAC3C,MAAM,IAAI,wBAAgB,CAAC,GAAG,CAAC,CAAC;SACnC;QAED,MAAM,8BAA8B,GAAyB,0BAA0B;aAClF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC;QAE1D,IAAK,8BAA8B,KAAK,SAAS,EAAG;YAChD,MAAM,IAAI,6BAAqB,CAAC,UAAU,QAAE,0BAA0B,CAAC,CAAC,CAAC,CAAC,KAAK,0CAAE,IAAI,CAAC,GAAG,EAAE,CAAA;SAC9F;QAED,OAAO,8BAA8B,CAAC,UAAU,CAAC;IACrD,CAAC;CACJ;AA/BD,wBA+BC;AAEY,QAAA,MAAM,GAAW,IAAI,MAAM,EAAE,CAAC","sourcesContent":["import { URL } from 'url';\nimport { MethodNotAllowedError, NoSuchRouteError } from '../error';\n\nexport class Router {\n\n    private readonly routes: RouteCollection = RouteCollection.initializeNew();\n\n    constructor() {}\n\n    public registerRoute( httpMethod: string, route: string, restMethod: () => any ) {\n        const routeParts: Array<string> = route.split('/');\n        const endpoint: Endpoint = { httpMethod, restMethod };\n\n        this.routes.addSubRoute(routeParts, endpoint);\n    }\n\n    routeRequest( httpMethod: string, url: URL ): () => any | never {\n        const calledRoute: Array<string> = url.pathname.split('/');\n\n        const endpointsWithMatchingRoute: Array<Endpoint> = this.routes.findEndpointsByRoute(calledRoute);\n\n        if ( endpointsWithMatchingRoute.length === 0 ) {\n            throw new NoSuchRouteError(url);\n        }\n\n        const endpointForRequestedHttpMethod: Endpoint | undefined = endpointsWithMatchingRoute\n            .find(endpoint => endpoint.httpMethod === httpMethod);\n\n        if ( endpointForRequestedHttpMethod === undefined ) {\n            throw new MethodNotAllowedError(httpMethod, endpointsWithMatchingRoute[0].route?.join('/'))\n        }\n\n        return endpointForRequestedHttpMethod.restMethod;\n    }\n}\n\nexport const router: Router = new Router();\n"]}