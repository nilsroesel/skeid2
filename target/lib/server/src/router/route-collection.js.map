{"version":3,"file":"route-collection.js","sourceRoot":"","sources":["../../../../../lib/server/src/router/route-collection.ts"],"names":[],"mappings":"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","sourcesContent":["import { ClashingRoutesError, DuplicatedEndpointError } from '../../../configuration/error';\nexport namespace Routing {\n    export class RouteCollection {\n\n        public static initializeNew(): RouteCollection {\n            return new RouteCollection(RoutePart.constructFromString(''));\n        }\n\n        private readonly subRoutes: Array<RouteCollection> = new Array<RouteCollection>();\n\n        private endpoints: Array<Endpoint> = new Array<Endpoint>();\n\n        private constructor(\n            private readonly route: RoutePart,\n            private readonly fullQualifiedRoute: Array<string> = [route.getPart()]\n        ) {\n        }\n\n        public addSubRoute( subRoute: Array<string>, endpoint: Endpoint ): void | never {\n            // TODO throw if subRoutes contains undefined/null\n            if ( subRoute.length === 0 ) return;\n            const currentPart: RoutePart = RoutePart.constructFromString(subRoute[0]);\n            if ( currentPart.getPart() === this.route.getPart() ) {\n                this.addSubRoute(subRoute.slice(1), endpoint);\n                return;\n            }\n\n            const newChild: RouteCollection = this.addChild(currentPart);\n            if ( subRoute.length === 1 ) {\n                if ( newChild.endpointForHttpMethodAlreadyExists(endpoint.httpMethod) ) {\n                    throw new DuplicatedEndpointError(newChild.fullQualifiedRoute, endpoint.httpMethod);\n                }\n                newChild.endpoints.push({ ...endpoint, route: newChild.fullQualifiedRoute });\n            }\n            newChild.addSubRoute(subRoute.slice(1), endpoint);\n\n        }\n\n        public findEndpointsByRoute( route: Array<string> ): Array<Endpoint> {\n            if ( route.length === 0 ) return [];\n            if ( route.length === 1 ) return this.endpoints;\n\n            if ( this.route.matchesSplitedUrlPart(route[0]) ) {\n                const nextPart: RoutePart = RoutePart.constructFromString(route[1]);\n                const childWithExactString: RouteCollection | undefined = this.getChild(nextPart);\n                const childAsPathVariable: RouteCollection | undefined = this.getPathVariable();\n\n                return childWithExactString?.findEndpointsByRoute(route.slice(1)) ||\n                    childAsPathVariable?.findEndpointsByRoute(route.slice(1)) || []\n            }\n            return [];\n        }\n\n        private addChild( routePart: RoutePart ): RouteCollection {\n            const existingRoutePart: RouteCollection | undefined = this.getChild(routePart);\n            if ( existingRoutePart !== undefined ) {\n                return existingRoutePart;\n            }\n\n            if ( routePart.isPathVariable() && this.hasAlreadyPathVariableAsChild() ) {\n                throw new ClashingRoutesError(this.fullQualifiedRoute.concat(routePart.getPart()),\n                    this.getPathVariable()?.fullQualifiedRoute || []);\n            }\n\n            const newSubRoute: RouteCollection =\n                new RouteCollection(routePart, this.fullQualifiedRoute.concat(routePart.getPart()));\n            this.subRoutes.push(newSubRoute);\n            return newSubRoute;\n        }\n\n        private getChild( routePart: RoutePart ): RouteCollection | undefined {\n            return this.subRoutes.find(part => part.route.getPart() === routePart.getPart());\n        }\n\n        private getPathVariable(): RouteCollection | undefined {\n            return this.subRoutes.find(part => part.route.isPathVariable());\n        }\n\n        private hasAlreadyPathVariableAsChild(): boolean {\n            return this.subRoutes.find(part => part.route.isPathVariable()) !== undefined;\n        }\n\n        private endpointForHttpMethodAlreadyExists( httpMethod: string ): boolean {\n            return this.endpoints.find(e => e.httpMethod === httpMethod) !== undefined;\n        }\n    }\n}\n"]}