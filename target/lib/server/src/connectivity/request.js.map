{"version":3,"file":"request.js","sourceRoot":"","sources":["../../../../../lib/server/src/connectivity/request.ts"],"names":[],"mappings":"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","sourcesContent":["import { IncomingHttpHeaders, IncomingMessage } from 'http';\n\nimport { InvalidSchemaError, RestSchema } from '../schema';\nimport { BadContentTypeError, BadRequestError } from '../error';\nimport { Maybe, Parameters } from '../../../global-types';\nimport { BadQueryParameterError } from '../error/bad-query-parameter-error';\n\nexport class Request<B, Q extends Parameters> {\n    public static async serializeBody<T>( request: IncomingMessage, schema: RestSchema<T> ): Promise<T> {\n        const rawBody: Buffer = await Request.binaryBody(request);\n        const jsonBody = await Promise.resolve()\n            .then(() => schema.preProcessor()(rawBody.toString()))\n            .catch(() => {\n                throw new BadContentTypeError(rawBody.toString(), 'JSON');\n            });\n        return schema.serialize(jsonBody);\n    }\n\n    public static async binaryBody( request: IncomingMessage ): Promise<Buffer> {\n        return new Promise<Buffer>((resolve, reject) => {\n            let body: any = [];\n            request.on('error', (error: Error) => {\n                reject(error);\n            }).on('data', (chunk) => {\n                body.push(chunk);\n            }).on('end', () => {\n                resolve(Buffer.concat(body));\n            }).on('close', () => {\n                resolve(Buffer.concat(body));\n            });\n        });\n    }\n\n    public static async new<S, Q extends Parameters>( request: IncomingMessage, routeParameters: any, queryParameters: any,\n        schema: Maybe<RestSchema<S>>, querySchema: Maybe<RestSchema<Q>> ) : Promise<Request<Maybe<S>, Parameters | Q>> {\n        const serializedQueryParams: Q | Parameters = await Promise.resolve()\n                .then(() => querySchema?.serialize(queryParameters || {}) || queryParameters)\n                .catch(error => {\n                    if ( error instanceof InvalidSchemaError ) {\n                        throw new BadQueryParameterError(error.message);\n                    }\n                    throw error;\n                });\n\n\n        if ( schema === undefined ) {\n            return new Request<undefined, {}>(request.headers, routeParameters, serializedQueryParams, undefined);\n        }\n\n        const serializedBody: S = await Request.serializeBody<S>(request, schema)\n            .catch(error => {\n                if ( error instanceof InvalidSchemaError ) {\n                    throw new BadRequestError(`Expected Body Schema: ${ JSON.stringify(error.message) }`);\n                }\n                throw error;\n            });\n        return new Request<S, Q | Parameters>(request.headers, routeParameters, serializedQueryParams, serializedBody);\n    }\n\n    private constructor(\n        public readonly headers: IncomingHttpHeaders,\n        public readonly routeParams: any,\n        public readonly queryParams: Q,\n        public readonly body: B\n    ) {}\n}\n"]}