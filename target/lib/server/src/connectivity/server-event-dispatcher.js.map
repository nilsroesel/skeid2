{"version":3,"file":"server-event-dispatcher.js","sourceRoot":"","sources":["../../../../../lib/server/src/connectivity/server-event-dispatcher.ts"],"names":[],"mappings":";;AAEA,MAAa,qBAAqB;IAE9B,YAA8B,UAA0B;QAA1B,eAAU,GAAV,UAAU,CAAgB;IAAI,CAAC;IAE7D;;;;;;OAMG;IACI,QAAQ,CAAK,IAAY,EAAE,OAAU,EAAE,EAAW;QACrD,MAAM,OAAO,GAAG,QAAQ;aACnB,MAAM,CAAC,IAAI,CAAC;aACZ,MAAM,CAAC,IAAI,CAAC;aACZ,MAAM,CAAC,EAAE,CAAA,CAAC,CAAC,MAAO,EAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;aAC/B,MAAM,CAAC,SAAU,IAAI,CAAC,SAAS,CAAC,OAAO,CAAE,EAAE,CAAC;aAC5C,MAAM,CAAC,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;CACJ;AApBD,sDAoBC","sourcesContent":["import { ServerResponse } from 'http';\n\nexport class ServerEventDispatcher {\n\n    constructor( private readonly connection: ServerResponse ) {}\n\n    /**\n     * Dispatch a sever-sent-event on the depending connection.\n     * Will throw an error if connection is closed\n     * @param name Name of the dispatched event\n     * @param payload Payload of the dispatched event\n     * @param id Optional id of the dispatched event\n     */\n    public dispatch<T>( name: string, payload: T, id?: number ): void {\n        const message = 'event:'\n            .concat(name)\n            .concat('\\n')\n            .concat(id? `id:${ id }\\n` : '')\n            .concat(`data: ${ JSON.stringify(payload) }`)\n            .concat('\\n\\n');\n        this.connection.write(message);\n    }\n}\n"]}