{"version":3,"file":"response.js","sourceRoot":"","sources":["../../../../../lib/server/src/connectivity/response.ts"],"names":[],"mappings":"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","sourcesContent":["import { OutgoingHttpHeaders, ServerResponse } from 'http';\nimport { HttpHeaders, HttpHeaderSet } from './http-headers';\nimport { Instantiable, Maybe } from '../../../global-types';\nimport { DeserializerFunction, getDeserializerMetadata } from '../decorators';\n\ninterface FinishedResponse {}\n\nexport interface Response {\n    body( data: any ): Response;\n    respond( data?: Maybe<Buffer | string> ): FinishedResponse;\n    setHeader( header: string, value: string | Array<string> ): Response;\n    setHeaders( headers: HttpHeaders | HttpHeaderSet ): Response;\n    status( statusCode: number, statusMessage?: Maybe<string> ): Response;\n    writeChunk( chunk: Buffer | string ): Response;\n    writeHead(): Response;\n}\n\nexport interface JsonResponse<T> extends Response {\n    body( from?: Maybe<T> ): JsonResponse<T>;\n}\n\nexport interface TextResponse extends Response {\n    body( from: string ): TextResponse;\n}\n\nexport interface ResponseFactory {\n    ResponseEntity(): Instantiable<Response>;\n    JsonResponseEntity<T>(): Instantiable<JsonResponse<T>>;\n    TextResponseEntity(): Instantiable<TextResponse>;\n}\n\nexport class ResponseEntityFactory implements ResponseFactory {\n\n    constructor( private readonly response: ServerResponse ) {}\n\n    public ResponseEntity(): Instantiable<Response> {\n        const response: ServerResponse = this.response;\n        return class implements Response {\n            private readonly headers: OutgoingHttpHeaders = {};\n\n            public body( data: any ): Response {\n                return this;\n            }\n\n            public respond( data?: Maybe<Buffer | string> ): FinishedResponse {\n                if ( data !== undefined && response.writable ) {\n                    response.write(data);\n                    response.end();\n                }\n                return {};\n            }\n\n            public setHeader( header: string, value: string | Array<string> ): Response {\n                if ( response.headersSent ) return this;\n                response.setHeader(header, value);\n                this.headers[header] = value;\n                return this;\n            }\n\n            public setHeaders( headers: HttpHeaders | HttpHeaderSet ): Response {\n                if ( response.headersSent ) return this;\n                if ( headers instanceof Set ) {\n                    headers.forEach( header => this.setHeader(header[0], header[1]));\n                } else {\n                    Object.entries(headers).forEach(headerEntry => this.setHeader(headerEntry[0], headerEntry[1]));\n                }\n                return this;\n            }\n\n            public status( statusCode: number, statusMessage?: Maybe<string> ): Response {\n                if ( response.headersSent ) return this;\n\n                response.statusCode = statusCode;\n                if ( statusMessage !== undefined ) response.statusMessage = statusMessage;\n                return this;\n            }\n\n            public writeChunk( chunkData: Buffer | string ): Response {\n                if ( !response.writable ) return this;\n                response.write(chunkData);\n                return this;\n            }\n\n            public writeHead(): Response {\n                if ( response.headersSent ) return this;\n                response.writeHead(response.statusCode, response.statusMessage,  this.headers);\n                return this;\n            }\n        }\n    }\n\n    public JsonResponseEntity<T>(): Instantiable<JsonResponse<T>> {\n        return class extends (this.ResponseEntity()) implements JsonResponse<T> {\n            private _body: Maybe<T> = undefined;\n\n            public body( from?: Maybe<T> ): JsonResponse<T> {\n                this._body = from;\n                return this;\n            }\n\n            public respond(): FinishedResponse {\n                return super.respond(this.deserializeBody());\n            }\n\n            public setHeader( header: string, value: string | Array<string> ): JsonResponse<T> {\n                super.setHeader(header, value);\n                return this;\n            }\n\n            public setHeaders( headers: HttpHeaders | HttpHeaderSet ): JsonResponse<T> {\n                super.setHeaders(headers);\n                return this;\n            }\n\n            public status( statusCode: number, statusMessage?: Maybe<string> ): JsonResponse<T> {\n                super.status(statusCode, statusMessage);\n                return this;\n            }\n            public writeChunk( chunk: Buffer | string ): JsonResponse<T> {\n                return this;\n            }\n\n            public writeHead(): JsonResponse<T> {\n                super.writeHead();\n                return this;\n            }\n\n            private deserializeBody(): string | Buffer {\n                const defaultDeserializer: DeserializerFunction<any> = JSON.stringify;\n\n                if ( this._body !== null && this._body !== undefined ) {\n                    const deserializer: Maybe<DeserializerFunction<T>> =\n                        getDeserializerMetadata((this._body as any).constructor).deserializer || defaultDeserializer;\n                    return deserializer(this._body);\n                }\n                return defaultDeserializer(this._body);\n            }\n        }\n    }\n\n    public TextResponseEntity(): Instantiable<TextResponse> {\n        return class extends (this.ResponseEntity()) implements TextResponse {\n            private _body: Maybe<string> = undefined;\n\n            public body( from: Maybe<any>, encoding: string = 'utf8' ): TextResponse {\n                const deserialize: Maybe<string> | Buffer = this.deserialize(from);\n                if ( deserialize instanceof Buffer ) {\n                    this._body = deserialize.toString(encoding);\n                    return this;\n                }\n                this._body = deserialize;\n                return this;\n            }\n\n            public respond( data?: Buffer | string ): FinishedResponse {\n                return super.respond(this._body);\n            }\n\n            public setHeader( header: string, value: string | Array<string> ): TextResponse{\n                super.setHeader(header, value);\n                return this;\n            }\n\n            public setHeaders( headers: HttpHeaders | HttpHeaderSet ): TextResponse {\n                super.setHeaders(headers);\n                return this;\n            }\n\n            public status( statusCode: number, statusMessage?: Maybe<string> ): TextResponse {\n                super.status(statusCode, statusMessage);\n                return this;\n            }\n            public writeChunk( chunk: Buffer | string ): TextResponse {\n                return this;\n            }\n\n            public writeHead(): TextResponse {\n                super.writeHead();\n                return this;\n            }\n\n            private deserialize( something: Maybe<any | null> ): Maybe<string | Buffer> {\n                if ( something === null || something === undefined ) return undefined;\n\n                const deserializer: Maybe<DeserializerFunction<any>> =\n                    getDeserializerMetadata((something as any).constructor).deserializer || String;\n                return deserializer(something);\n            }\n        }\n    }\n}\n"]}