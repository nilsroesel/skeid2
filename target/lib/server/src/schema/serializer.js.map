{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../../../../../lib/server/src/schema/serializer.ts"],"names":[],"mappings":";;AAIA,SAAgB,cAAc,CAAE,UAAkB;IAC9C,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;AAChC,CAAC;AAFD,wCAEC;AAED,SAAgB,eAAe,CAAK,UAAyB;IACzD,MAAM,IAAI,GAAG,WAAY,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,2BAA2B,EAAE,CAAE,GAAG,CAAC;IACtF,MAAM,UAAU,GAAI;QAChB,CAAC,IAAI,CAAC,EAAE,CAAC,SAAqB,EAAqB,EAAE;YACjD,IAAK,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAG;gBAC7B,MAAM,IAAI,SAAS,CAAC,cAAe,SAAU,qBAAqB,CAAC,CAAC;aACvE;YACD,OAAO,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,CAAC;KACJ,CAAC;IACF,OAAO,UAAU,CAAC,IAAI,CAAC,CAAA;AAC3B,CAAC;AAXD,0CAWC","sourcesContent":["import { RestSchema } from './rest-schema';\n\nexport type Serializer<T> = ( something: any ) => T | never;\n\nexport function DateSerializer( dateString: string ): Date {\n    return new Date(dateString);\n}\n\nexport function ArraySerializer<T>( itemSchema: RestSchema<T> ): ( fromArray: Array<any> ) => Array<T> | never {\n    const name = `ArrayOf[${ JSON.stringify(itemSchema.getLoggableSchemaDefinition()) }]`;\n    const serializer  = {\n        [name]: (fromArray: Array<any> ): Array<T> | never => {\n            if ( !Array.isArray(fromArray) ) {\n                throw new TypeError(`Expected <<${ fromArray }>> to be array type`);\n            }\n            return fromArray.map(item => itemSchema.serialize(item));\n        }\n    };\n    return serializer[name]\n}\n"]}