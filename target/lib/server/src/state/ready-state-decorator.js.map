{"version":3,"file":"ready-state-decorator.js","sourceRoot":"","sources":["../../../../../lib/server/src/state/ready-state-decorator.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sFAAiF;AACjF,+DAA0D;AAC1D,wDAA2E;AAE3E,iFAA2E;AAE3E,SAAgB,UAAU,CAAE,MAAW,EAAE,WAAmB;IACxD,2CAAmC,CAAC,6BAA6B,EAAE,CAAC;IACpE,2CAAmC,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AACpF,CAAC;AAHD,gCAGC;AAED,MAAM,mCAAmC;IAAzC;QACY,uBAAkB,GAAW,CAAC,CAAC;QAE/B,uBAAkB,GAA6B,IAAI,KAAK,EAAqB,CAAC;IA6B1F,CAAC;IA3BU,UAAU,CAAE,cAAiC,EAAE,SAAiB;QACnE,yCAAkB,CAAC,UAAU,CAAC,GAAS,EAAE;YACrC,MAAM,SAAS,GAAQ,MAAM,yCAAkB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC/E,MAAM,OAAO,GAAY,SAAS,CAAC,SAAS,CAAC,CAAC;YAC9C,IAAK,CAAC,CAAC,OAAO,YAAY,uCAAiB,CAAC,EAAG;gBAC3C,MAAM,IAAI,mCAA2B,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,uCAAiB,CAAC,IAAI,CAAC,CAAC;aACjG;YACD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAA,CAAC,CAAC;IACP,CAAC;IAEM,6BAA6B;QAChC,EAAE,IAAI,CAAC,kBAAkB,CAAC;IAC9B,CAAC;IAEM,yBAAyB;QAC5B,IAAK,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,EAAG;YAC5D,MAAM,IAAI,KAAK,CAAC,oBAAqB,IAAI,CAAC,kBAAkB,CAAC,MAAM,YAAY;gBAC3E,OAAQ,IAAI,CAAC,kBAAmB,kBAAkB,CAAC,CAAC;SAC3D;QACD,OAAO,uCAAiB,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACtE,IAAK,OAAO,YAAY,wDAAyB,EAAG;gBAChD,OAAO,OAAO,CAAC,uCAAuC,EAAE,CAAC;aAC5D;YACD,OAAO,OAAO,CAAC;QACnB,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;CACJ;AAEY,QAAA,mCAAmC,GAC1C,IAAI,mCAAmC,EAAE,CAAC","sourcesContent":["import { applicationContext } from '../../../injection/src/appplication-context';\nimport { ReadyStateEmitter } from './ready-state-emitter';\nimport { InvalidInstanceOnFiledError } from '../../../configuration/error';\nimport { Instantiable } from '../../../global-types';\nimport { PristineReadyStateEmitter } from './pristine-ready-state-emitter';\n\nexport function ReadyState( target: any, emitterName: string ) {\n    classFieldReadyStateEmitterComposer.incrementTargetedEmitterCount();\n    classFieldReadyStateEmitterComposer.addEmitter(target.constructor, emitterName);\n}\n\nclass ClassFieldReadyStateEmitterComposer {\n    private targetEmitterCount: number = 0;\n\n    private registeredEmitters: Array<ReadyStateEmitter> = new Array<ReadyStateEmitter>();\n\n    public addEmitter( dependencyName: Instantiable<any>, fieldName: string ): void {\n        applicationContext.whenLoaded(async () => {\n            const component: any = await applicationContext.loadDependency(dependencyName);\n            const emitter: unknown = component[fieldName];\n            if ( !(emitter instanceof ReadyStateEmitter) ) {\n                throw new InvalidInstanceOnFiledError(dependencyName.name, fieldName, ReadyStateEmitter.name);\n            }\n            this.registeredEmitters.push(emitter);\n        });\n    }\n\n    public incrementTargetedEmitterCount() {\n        ++this.targetEmitterCount;\n    }\n\n    public composeRegisteredEmitters(): ReadyStateEmitter | never {\n        if ( this.registeredEmitters.length < this.targetEmitterCount ) {\n            throw new Error(`Tried to compose ${ this.registeredEmitters.length} emitters,` +\n                `but ${ this.targetEmitterCount } where targeted.`);\n        }\n        return ReadyStateEmitter.compose(...this.registeredEmitters.map(emitter => {\n            if ( emitter instanceof PristineReadyStateEmitter ) {\n                return emitter.getSelfAndSetToReadyIfPristineAfterInit();\n            }\n            return emitter;\n        }));\n    }\n}\n\nexport const classFieldReadyStateEmitterComposer: ClassFieldReadyStateEmitterComposer\n    = new ClassFieldReadyStateEmitterComposer();\n"]}