{"version":3,"file":"error-handler-state-emitter.js","sourceRoot":"","sources":["../../../../../lib/server/src/state/error-handler-state-emitter.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,sFAAiF;AACjF,8CAAoE;AACpE,wDAAyE;AACzE,oDAAsE;AACtE,iFAA2E;AAE3E,MAAa,wBAAyB,SAAQ,wDAAyB;IAAvE;;QACY,6BAAwB,GAAW,CAAC,CAAC;QACrC,uBAAkB,GAAW,CAAC,CAAC;IAiC3C,CAAC;IA/BU,uCAAuC;QAC1C,yCAAkB,CAAC,UAAU,CAAC,GAAG,EAAE;YAC/B,IAAK,IAAI,CAAC,UAAU,EAAE,EAAG;gBACrB,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7B;QACL,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,sBAAsB,CAAE,MAAW,EAAE,UAAqB;QAC7D,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,EAAE,IAAI,CAAC,wBAAwB,CAAC;QAChC,yCAAkB,CAAC,UAAU,CAAC,GAAS,EAAE;YACrC,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,MAAM,gBAAgB,GAAQ,MAAM,yCAAkB,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAC1F,MAAM,MAAM,GAAY,gBAAgB,CAAC,UAAU,CAAC,CAAC;YACrD,IAAK,CAAC,kCAAqB,CAAC,MAAM,CAAC,EAAG;gBAClC,MAAM,IAAI,iCAAyB,CAAC,4BAAY,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;aACjE;YACD,MAAM,OAAO,GAAG,CAAC,KAAU,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;YACxE,yBAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAC9B,oCAAoB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC7C,CAAC,CAAA,CAAC,CAAC;IACP,CAAC;IAEO,oBAAoB;QACxB,EAAE,IAAI,CAAC,kBAAkB,CAAC;QAC1B,IAAK,IAAI,CAAC,wBAAwB,KAAK,IAAI,CAAC,kBAAkB,EAAG;YAC7D,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;IACL,CAAC;CACJ;AAnCD,4DAmCC;AAEY,QAAA,sBAAsB,GAA6B,IAAI,wBAAwB,EAAE,CAAC","sourcesContent":["import { Qualifier } from '../../../global-types';\nimport { applicationContext } from '../../../injection/src/appplication-context';\nimport { copyMetadata, decoratedItemIsMethod } from '../decorators';\nimport { InvalidDecoratedItemError } from '../../../configuration/error';\nimport { ErrorHandler, errorHandlerRegistry } from '../error-handler';\nimport { PristineReadyStateEmitter } from './pristine-ready-state-emitter';\n\nexport class ErrorHandlerStateEmitter extends PristineReadyStateEmitter {\n    private targetedNumberOfHandlers: number = 0;\n    private initializedHandler: number = 0;\n\n    public getSelfAndSetToReadyIfPristineAfterInit(): ErrorHandlerStateEmitter {\n        applicationContext.whenLoaded(() => {\n            if ( this.isPristine() ) {\n                this.changeStateToReady();\n            }\n        });\n        return this;\n    }\n\n    public initializeErrorHandler( target: any, methodName: Qualifier ): void {\n        this.changeToStale();\n        ++this.targetedNumberOfHandlers;\n        applicationContext.whenLoaded(async () => {\n            this.incrementInitialized();\n            const handlerComponent: any = await applicationContext.loadDependency(target.constructor);\n            const method: unknown = handlerComponent[methodName];\n            if ( !decoratedItemIsMethod(method) ) {\n                throw new InvalidDecoratedItemError(ErrorHandler, ['METHOD']);\n            }\n            const handler = (error: any) => method.apply(handlerComponent, [error]);\n            copyMetadata(method, handler);\n            errorHandlerRegistry.addHandler(handler);\n        });\n    }\n\n    private incrementInitialized() {\n        ++this.initializedHandler;\n        if ( this.targetedNumberOfHandlers === this.initializedHandler ) {\n            this.changeStateToReady();\n        }\n    }\n}\n\nexport const errorHandlerReadyState: ErrorHandlerStateEmitter = new ErrorHandlerStateEmitter();\n"]}