{"version":3,"file":"routes-ready-state-emitter.js","sourceRoot":"","sources":["../../../../../lib/server/src/state/routes-ready-state-emitter.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sFAAiF;AACjF,8CAAoE;AACpE,0DAAmE;AACnE,8CAA2C;AAC3C,iFAA2E;AAE3E,MAAM,uBAAwB,SAAQ,wDAAyB;IAA/D;;QAEY,yBAAoB,GAAW,CAAC,CAAC;QACjC,sBAAiB,GAAW,CAAC,CAAC;IAwC1C,CAAC;IAtCU,uCAAuC;QAC1C,yCAAkB,CAAC,UAAU,CAAC,GAAG,EAAE;YAC/B,IAAK,IAAI,CAAC,UAAU,EAAE,EAAE;gBACpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7B;QACL,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,6BAA6B;QAChC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,EAAE,IAAI,CAAC,oBAAoB,CAAC;IAChC,CAAC;IAEM,0BAA0B;QAC7B,EAAE,IAAI,CAAC,iBAAiB,CAAC;QACzB,IAAK,IAAI,CAAC,iBAAiB,KAAK,IAAI,CAAC,oBAAoB,EAAG;YACxD,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;IACL,CAAC;IAEM,eAAe,CAAK,SAAmB,EAAE,UAAkB,EAAE,KAAa,EAAE,MAAW,EAC1F,UAAkB;QAClB,kFAAkF;QAClF,yEAAyE;QACzE,yCAAkB,CAAC,UAAU,CAAC,GAAS,EAAE;YACrC,MAAM,SAAS,GAAQ,MAAM,yCAAkB,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAEnF,MAAM,MAAM,GAAY,SAAS,CAAC,UAAU,CAAC,CAAC;YAC9C,IAAK,CAAC,kCAAqB,CAAC,MAAM,CAAC,EAAG;gBAClC,MAAM,IAAI,yCAAyB,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC9D;YACD,MAAM,UAAU,GAAG,CAAE,IAAgB,EAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACzE,yBAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACjC,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAClC,eAAM,CAAC,aAAa,CAAC,UAAU,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QACxD,CAAC,CAAA,CAAC,CAAC;IACP,CAAC;CACJ;AAEY,QAAA,gBAAgB,GAA4B,IAAI,uBAAuB,EAAE,CAAC","sourcesContent":["import { applicationContext } from '../../../injection/src/appplication-context';\nimport { copyMetadata, decoratedItemIsMethod } from '../decorators';\nimport { InvalidDecoratedItemError } from '../../../configuration';\nimport { router } from '../routing/router';\nimport { PristineReadyStateEmitter } from './pristine-ready-state-emitter';\n\nclass RoutesReadyStateEmitter extends PristineReadyStateEmitter {\n\n    private targetNumberOfRoutes: number = 0;\n    private initializedRoutes: number = 0;\n\n    public getSelfAndSetToReadyIfPristineAfterInit(): RoutesReadyStateEmitter {\n        applicationContext.whenLoaded(() => {\n            if ( this.isPristine()) {\n                this.changeStateToReady();\n            }\n        });\n        return this;\n    }\n\n    public incrementTargetNumberOfRoutes(): void {\n        this.changeToStale();\n        ++this.targetNumberOfRoutes;\n    }\n\n    public incrementInitializedRoutes(): void {\n        ++this.initializedRoutes;\n        if ( this.initializedRoutes === this.targetNumberOfRoutes ) {\n            this.changeStateToReady();\n        }\n    }\n\n    public initializeRoute<T>( decorator: Function, httpMethod: string, route: string, target: any,\n        methodName: string ): void {\n        // This will change effectively the evaluation order of the typescript decorators.\n        // To ensure decorators, on which this decorator relies on, are evaluated\n        applicationContext.whenLoaded(async () => {\n            const component: any = await applicationContext.loadDependency(target.constructor);\n\n            const method: unknown = component[methodName];\n            if ( !decoratedItemIsMethod(method) ) {\n                throw new InvalidDecoratedItemError(decorator, ['METHOD']);\n            }\n            const restMethod = ( args: Array<any> ) => method.apply(component, args);\n            copyMetadata(method, restMethod);\n            this.incrementInitializedRoutes();\n            router.registerRoute(httpMethod, route, restMethod);\n        });\n    }\n}\n\nexport const routesReadyState: RoutesReadyStateEmitter = new RoutesReadyStateEmitter();\n"]}