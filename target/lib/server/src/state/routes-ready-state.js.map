{"version":3,"file":"routes-ready-state.js","sourceRoot":"","sources":["../../../../../lib/server/src/state/routes-ready-state.ts"],"names":[],"mappings":";;AAAA,sFAAiF;AACjF,+CAA4D;AAC5D,wDAAyE;AACzE,8CAA2C;AAC3C,+DAA0D;AAE1D,MAAa,gBAAiB,SAAQ,uCAAiB;IAAvD;;QAEY,yBAAoB,GAAW,CAAC,CAAC;QACjC,sBAAiB,GAAW,CAAC,CAAC;IA4B1C,CAAC;IA1BU,6BAA6B;QAChC,EAAE,IAAI,CAAC,oBAAoB,CAAC;IAChC,CAAC;IAEM,0BAA0B;QAC7B,EAAE,IAAI,CAAC,iBAAiB,CAAC;QACzB,IAAK,IAAI,CAAC,iBAAiB,KAAK,IAAI,CAAC,oBAAoB,EAAG;YACxD,IAAI,CAAC,QAAQ,EAAE,CAAC;SACnB;IACL,CAAC;IAEM,eAAe,CAAE,UAAkB,EAAE,KAAa,EAAE,MAAW,EAAE,UAAkB;QACtF,gEAAgE;QAChE,kFAAkF;QAClF,yEAAyE;QACzE,UAAU,CAAC,GAAG,EAAE;YACZ,yCAAkB,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAE,SAAc,EAAG,EAAE;gBAC5E,MAAM,MAAM,GAAY,SAAS,CAAC,UAAU,CAAC,CAAC;gBAC9C,IAAK,CAAC,6BAAqB,CAAC,MAAM,CAAC,EAAG;oBAClC,MAAM,IAAI,iCAAyB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;iBAC3D;gBACD,IAAI,CAAC,0BAA0B,EAAE,CAAC;gBAClC,eAAM,CAAC,aAAa,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;YAC3E,CAAC,CAAC,CAAA;QACN,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;CACJ;AA/BD,4CA+BC;AAEY,QAAA,gBAAgB,GAAqB,IAAI,gBAAgB,EAAE,CAAC","sourcesContent":["import { applicationContext } from '../../../injection/src/appplication-context';\nimport { decoratedItemIsMethod } from '../decorators/utils';\nimport { InvalidDecoratedItemError } from '../../../configuration/error';\nimport { router } from '../routing/router';\nimport { ReadyStateEmitter } from './ready-state-emitter';\n\nexport class RoutesReadyState extends ReadyStateEmitter {\n\n    private targetNumberOfRoutes: number = 0;\n    private initializedRoutes: number = 0;\n\n    public incrementTargetNumberOfRoutes(): void {\n        ++this.targetNumberOfRoutes;\n    }\n\n    public incrementInitializedRoutes(): void {\n        ++this.initializedRoutes;\n        if ( this.initializedRoutes === this.targetNumberOfRoutes ) {\n            this.setReady();\n        }\n    }\n\n    public initializeRoute( httpMethod: string, route: string, target: any, methodName: string ): void {\n        // TODO Polish the load time with an good metric (timeout value)\n        // This will change effectively the evaluation order of the typescript decorators.\n        // To ensure decorators, on which this decorator relies on, are evaluated\n        setTimeout(() => {\n            applicationContext.loadDependency(target.constructor).then(( component: any ) => {\n                const method: unknown = component[methodName];\n                if ( !decoratedItemIsMethod(method) ) {\n                    throw new InvalidDecoratedItemError(target, methodName);\n                }\n                this.incrementInitializedRoutes();\n                router.registerRoute(httpMethod, route, () => method.apply(component));\n            })\n        }, 100);\n    }\n}\n\nexport const routesReadyState: RoutesReadyState = new RoutesReadyState();\n"]}