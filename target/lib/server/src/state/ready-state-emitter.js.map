{"version":3,"file":"ready-state-emitter.js","sourceRoot":"","sources":["../../../../../lib/server/src/state/ready-state-emitter.ts"],"names":[],"mappings":";;AAAA,mCAAsC;AAEtC,MAAa,iBAAiB;IAwB1B;QAHQ,YAAO,GAAiB,IAAI,qBAAY,EAAE,CAAC;QAC3C,UAAK,GAAY,KAAK,CAAC;IAEhB,CAAC;IAtBT,MAAM,CAAC,OAAO,CAAE,GAAI,QAAkC;QACzD,MAAM,eAAe,GAAsB,IAAI,iBAAiB,EAAE,CAAC;QACnE,IAAK,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAG;YACzB,eAAe,CAAC,kBAAkB,EAAE,CAAC;SACxC;QAED,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACvB,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE;gBACnB,MAAM,gBAAgB,GAAmB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;gBAC9E,MAAM,mBAAmB,GAAY,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;gBACrF,IAAK,mBAAmB,EAAG;oBACvB,eAAe,CAAC,kBAAkB,EAAE,CAAC;iBACxC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IAC3B,CAAC;IAOM,aAAa;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEM,kBAAkB;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;IACtC,CAAC;IAEM,SAAS,CAAE,QAAkB;QAChC,IAAK,IAAI,CAAC,KAAK,EAAG;YACd,OAAO,QAAQ,EAAE,CAAC;SACrB;QACD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CACJ;AA1CD,8CA0CC","sourcesContent":["import { EventEmitter } from 'events';\n\nexport class ReadyStateEmitter {\n\n    public static compose( ... emitters: Array<ReadyStateEmitter> ): ReadyStateEmitter {\n        const composedEmitter: ReadyStateEmitter = new ReadyStateEmitter();\n        if ( emitters.length === 0 ) {\n            composedEmitter.changeStateToReady();\n        }\n\n        emitters.forEach(emitter => {\n            emitter.whenReady(() =>{\n                const allEmitterStates: Array<boolean> = emitters.map(e => e.getReadyState());\n                const allEmittersAreReady: boolean = allEmitterStates.reduce((a, c) => a && c, true);\n                if ( allEmittersAreReady ) {\n                    composedEmitter.changeStateToReady();\n                }\n            });\n        });\n\n        return composedEmitter;\n    }\n\n    private emitter: EventEmitter = new EventEmitter();\n    private state: boolean = false;\n\n    constructor() {}\n\n    public getReadyState(): boolean {\n        return this.state;\n    }\n\n    public changeStateToReady(): void {\n        this.state = true;\n        this.emitter.emit('ready');\n        this.emitter.removeAllListeners();\n    }\n\n    public whenReady( callback: Function ): void {\n        if ( this.state ) {\n            return callback();\n        }\n        this.emitter.addListener('ready', callback);\n    }\n}\n"]}