{"version":3,"file":"parameter-descriptor.js","sourceRoot":"","sources":["../../../../../lib/server/src/utils/parameter-descriptor.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAI1B,SAAgB,kBAAkB,CAAE,UAAoB,EAAE,cAAsB;IAC5E,MAAM,cAAc,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;IAC7C,MAAM,mBAAmB,GAAG,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5D,MAAM,mBAAmB,GAAG,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACxD,MAAM,eAAe,GAAG,cAAc,CAAC,KAAK,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,CAAC;IACvF,MAAM,cAAc,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IACrF,MAAM,oBAAoB,GAAG,cAAc,CAAC,cAAc,CAAC,CAAC;IAE5D,IAAK,oBAAoB,KAAK,SAAS;QAAG,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IACxF,MAAM,sBAAsB,GAAG,oBAAoB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACtE,IAAK,sBAAsB;QAAG,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IAEhF,OAAO,oBAAoB,CAAC;AAChC,CAAC;AAbD,gDAaC;AAQD,SAAgB,IAAI,CAAE,MAAW,EAAE,GAAW,EAAE,KAAa;IACzD,+BAA+B,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;AAClE,CAAC;AAFD,oBAEC;AAGD,SAAgB,+BAA+B,CAAE,MAAW,EAAE,GAAW,EAAE,KAAa,EAAE,YAAyC;IAC/H,MAAM,IAAI,GAAW,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;IAC5D,MAAM,KAAK,GAAI,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;IAErE,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;AAE5D,CAAC;AAND,0EAMC","sourcesContent":["import 'reflect-metadata';\n\nimport { Qualifier } from '../../../global-types';\n\nexport function getNameOfParameter( ofFunction: Function, parameterIndex: number ): string | never {\n    const functionString = ofFunction.toString();\n    const indexOfOpeningBrace = functionString.indexOf('(') + 1;\n    const indexOfClosingBrace = functionString.indexOf(')');\n    const argumentContent = functionString.slice(indexOfOpeningBrace, indexOfClosingBrace);\n    const parameterNames = argumentContent.split(' ').map(name => name.replace(',', ''));\n    const parameterNameAtIndex = parameterNames[parameterIndex];\n\n    if ( parameterNameAtIndex === undefined ) throw new Error('No parameter on this index');\n    const isRestOperatorArgument = parameterNameAtIndex.startsWith('...');\n    if ( isRestOperatorArgument ) throw new Error('Rest Operator is not supported');\n\n    return parameterNameAtIndex;\n}\n\nexport interface ParameterDescriptor {\n    index: number;\n    name: string;\n    type: any;\n}\n\nexport function Test( target: any, key: string, index: number ) {\n    callDescribedParameterDecorator(target, key, index, () => {});\n}\n\nexport type DescribedParameterDecorator = ( target: any, key: Qualifier, parameterDescriptor: ParameterDescriptor ) => void;\nexport function callDescribedParameterDecorator( target: any, key: string, index: number, decorateWith: DescribedParameterDecorator ) {\n    const name: string = getNameOfParameter(target[key], index);\n    const types  = Reflect.getMetadata('design:paramtypes', target, key);\n\n    decorateWith(target, key, { name, index, type: 'any' });\n\n}\n"]}