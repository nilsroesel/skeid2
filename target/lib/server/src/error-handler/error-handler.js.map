{"version":3,"file":"error-handler.js","sourceRoot":"","sources":["../../../../../lib/server/src/error-handler/error-handler.ts"],"names":[],"mappings":";;AAEA,8CAAsD;AACtD,wDAAyE;AACzE,oCAAkD;AAIlD,SAAgB,YAAY,CAAE,MAAW,EAAE,UAAqB;IAC5D,IAAK,CAAC,kCAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAG;QAC9C,MAAM,IAAI,iCAAyB,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;KACjE;IACD,8BAAsB,CAAC,sBAAsB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AACtE,CAAC;AALD,oCAKC","sourcesContent":["import { ApiError } from '../error';\nimport { Maybe, Qualifier } from '../../../global-types';\nimport { decoratedItemIsMethod } from '../decorators';\nimport { InvalidDecoratedItemError } from '../../../configuration/error';\nimport { errorHandlerReadyState } from '../state';\n\nexport type ErrorHandlerFunction = ( error: Error ) => Maybe<ApiError>;\n\nexport function ErrorHandler( target: any, methodName: Qualifier ) {\n    if ( !decoratedItemIsMethod(target[methodName]) ) {\n        throw new InvalidDecoratedItemError(ErrorHandler, ['METHOD']);\n    }\n    errorHandlerReadyState.initializeErrorHandler(target, methodName);\n}\n"]}