{"version":3,"file":"rest-error-handler.js","sourceRoot":"","sources":["../../../../../lib/server/src/error-handler/rest-error-handler.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,qEAAgE;AAGhE,8CAAiF;AAEjF,MAAa,gBAAgB;IAczB,YAAsC,kBAA+C,EAAE;QAAjD,oBAAe,GAAf,eAAe,CAAkC;IAAI,CAAC;IAZrF,MAAM,CAAC,UAAU;QACpB,OAAO,IAAI,gBAAgB,EAAE,CAAC;IAClC,CAAC;IAEM,MAAM,CAAC,yBAAyB,CAAE,GAAG,QAAqC;QAC7E,OAAO,IAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEO,MAAM,CAAC,sCAAsC,CAAE,KAAY;QAC/D,OAAO,0CAA6B,CAAE,KAAa,CAAC,WAAW,CAAC,CAAC;IACrE,CAAC;IAIM,WAAW,CAAE,KAAY;QAC5B,MAAM,mBAAmB,GAAoB,6CAAoB,CAAC,SAAS,EAAE;aACxE,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,YAAY,gBAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACpF,MAAM,yBAAyB,GAAoB,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QAEvF,OAAO,mBAAmB,IAAI,yBAAyB,IAAI,IAAI,gBAAQ,CAAC,GAAG,EACvE,GAAI,KAAK,CAAC,IAAK,KAAM,KAAK,CAAC,OAAQ,OAAQ,KAAK,CAAC,KAAK,IAAI,EAAG,EAAE,CAAC,CAAC;IACzE,CAAC;IAEM,uBAAuB,CAAE,KAAY;QACxC,MAAM,iBAAiB,GAAsB,gBAAgB,CAAC,sCAAsC,CAAC,KAAK,CAAC,CAAC;QAE5G,IAAK,iBAAiB,CAAC,UAAU,KAAK,SAAS,EAAG;YAC9C,OAAO,IAAI,gBAAQ,CAAC,iBAAiB,CAAC,UAAU,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;SACpE;IACL,CAAC;CAEJ;AAjCD,4CAiCC","sourcesContent":["import { ApiError } from '../error';\nimport { errorHandlerRegistry } from './error-handler-registry';\nimport { Maybe } from '../../../global-types';\nimport { ErrorHandlerFunction } from './error-handler';\nimport { getProducingDecoratorMetadata, ProducingMetadata } from '../decorators';\n\nexport class RestErrorHandler {\n\n    public static customOnly(): RestErrorHandler {\n        return new RestErrorHandler();\n    }\n\n    public static useDefaultHandlerFunction( ...handlers: Array<ErrorHandlerFunction> ): RestErrorHandler {\n        return new RestErrorHandler(handlers);\n    }\n\n    private static findResponseOptionsMetadataByErrorType( error: Error ): ProducingMetadata {\n        return getProducingDecoratorMetadata((error as any).constructor);\n    }\n\n    private constructor( private readonly defaultHandlers: Array<ErrorHandlerFunction> = [] ) {}\n\n    public handleError( error: Error ): ApiError {\n        const customHandlerResult: Maybe<ApiError> = errorHandlerRegistry.retainAll()\n            .map(handler => handler(error)).filter(result => result instanceof ApiError)[0];\n        const mappedByProducesDecorator: Maybe<ApiError> = this.tryToMapErrorByMetadata(error);\n\n        return customHandlerResult || mappedByProducesDecorator || new ApiError(500,\n            `${ error.name }: ${ error.message } \\n ${ error.stack || '' }`);\n    }\n\n    public tryToMapErrorByMetadata( error: Error ): Maybe<ApiError> {\n        const producingMetadata: ProducingMetadata = RestErrorHandler.findResponseOptionsMetadataByErrorType(error);\n\n        if ( producingMetadata.statusCode !== undefined ) {\n            return new ApiError(producingMetadata.statusCode, error.message);\n        }\n    }\n\n}\n"]}