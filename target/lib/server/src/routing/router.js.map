{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../../lib/server/src/routing/router.ts"],"names":[],"mappings":";;AACA,oCAAmE;AACnE,yBAAgF;AAEhF,8CAAoE;AACpE,wEAAkE;AAElE,MAAa,MAAM;IAIf;QAFiB,WAAM,GAAoB,kBAAe,CAAC,aAAa,EAAE,CAAC;IAE5D,CAAC;IAET,aAAa,CAAK,UAAkB,EAAE,KAAa,EAAE,UAAoB;QACxE,MAAM,UAAU,GAAkB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,QAAQ,GAA0B,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;QAEnE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED,YAAY,CAAE,UAAkB,EAAE,GAAQ,EAAE,cAA6B,0BAAa;;QAClF,MAAM,WAAW,GAAkB,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEnE,MAAM,0BAA0B,GAC1B,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QAEpD,IAAK,0BAA0B,CAAC,MAAM,KAAK,CAAC,EAAG;YAC3C,MAAM,IAAI,wBAAgB,CAAC,GAAG,CAAC,CAAC;SACnC;QAED,MAAM,8BAA8B,GAAmC,0BAA0B;aAC5F,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAI,SAAS,CAAC,CAAC;QAExF,IAAK,8BAA8B,CAAC,MAAM,KAAK,CAAC,EAAG;YAC/C,MAAM,IAAI,6BAAqB,CAAC,UAAU,QAAE,0BAA0B,CAAC,CAAC,CAAC,CAAC,KAAK,0CAAE,IAAI,CAAC,GAAG,EAAE,CAAA;SAC9F;QAED,MAAM,qBAAqB,GAAmC,8BAA8B;aACvF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,iCAAoB,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,WAAW,CAAC;YAC5E,8BAA8B;iBACzB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,iCAAoB,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,SAAS,CAAC,CAAC;QAEnF,IAAK,qBAAqB,KAAK,SAAS,EAAG;YACvC,MAAM,IAAI,wCAAiB,CACvB,OAAA,0BAA0B,CAAC,CAAC,CAAC,CAAC,KAAK,0CAAE,IAAI,CAAC,GAAG,MAAK,GAAG,CAAC,QAAQ,IAAI,EAAE,EACpE,8BAA8B,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,iCAAoB,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,0BAAa,CAAC,CAAC,CAAA;SACpG;QAED,MAAM,aAAa,GAAG,kBAAe,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,KAAK,IAAI,EAAE,EACvF,WAAW,CAAC,CAAC;QAEjB,uCAAY,qBAAqB,KAAE,aAAa,IAAG;IACvD,CAAC;CACJ;AA9CD,wBA8CC;AAEY,QAAA,MAAM,GAAW,IAAI,MAAM,EAAE,CAAC","sourcesContent":["import { Url } from 'url';\nimport { MethodNotAllowedError, NoSuchRouteError } from '../error';\nimport { AssignedPathVariables, RegisteredEndpoint, RouteCollection } from './';\nimport { Maybe } from '../../../global-types';\nimport { getConsumingMimeType, MIME_WILDCARD } from '../decorators';\nimport { BadMediaTypeError } from '../error/bad-media-type-error';\n\nexport class Router {\n\n    private readonly routes: RouteCollection = RouteCollection.initializeNew();\n\n    constructor() {}\n\n    public registerRoute<T>( httpMethod: string, route: string, restMethod: Function ) {\n            const routeParts: Array<string> = route.split('/');\n            const endpoint: RegisteredEndpoint<T> = { httpMethod, restMethod };\n\n            this.routes.addSubRoute(routeParts, endpoint);\n    }\n\n    routeRequest( httpMethod: string, url: Url, contentType: Maybe<string> = MIME_WILDCARD ): RegisteredEndpoint<unknown> & AssignedPathVariables {\n        const calledRoute: Array<string> = (url.pathname || '').split('/');\n\n        const endpointsWithMatchingRoute: Array<RegisteredEndpoint<any>>\n            = this.routes.findEndpointsByRoute(calledRoute);\n\n        if ( endpointsWithMatchingRoute.length === 0 ) {\n            throw new NoSuchRouteError(url);\n        }\n\n        const endpointForRequestedHttpMethod: Array<RegisteredEndpoint<any>> = endpointsWithMatchingRoute\n            .filter(endpoint => endpoint.httpMethod === httpMethod).filter(e => e!== undefined);\n\n        if ( endpointForRequestedHttpMethod.length === 0 ) {\n            throw new MethodNotAllowedError(httpMethod, endpointsWithMatchingRoute[0].route?.join('/'))\n        }\n\n        const appliedMimeTypeFilter: Maybe<RegisteredEndpoint<any>> = endpointForRequestedHttpMethod\n            .find(endpoint => getConsumingMimeType(endpoint.restMethod) === contentType) ||\n            endpointForRequestedHttpMethod\n                .find(endpoint => getConsumingMimeType(endpoint.restMethod) === undefined);\n\n        if ( appliedMimeTypeFilter === undefined ) {\n            throw new BadMediaTypeError(\n                endpointsWithMatchingRoute[0].route?.join('/') || url.pathname || '',\n                endpointForRequestedHttpMethod.map(e => getConsumingMimeType(e.restMethod) || MIME_WILDCARD))\n        }\n\n        const pathVariables = RouteCollection.parsePathParameters(appliedMimeTypeFilter.route || [],\n            calledRoute);\n\n        return { ...appliedMimeTypeFilter, pathVariables };\n    }\n}\n\nexport const router: Router = new Router();\n\n\n"]}